"""Module defines osm tags convert functions and mappings."""

# Primary categories like type of buildings
PRIMARY_TAGS = (
    'aerialway-cable_car',
    'aerialway-chair_lift',
    'aerialway-drag_lift',
    'aerialway-gondola',
    'aerialway-mixed_lift',
    'aerialway-station',
    'aeroway-aerodrome',
    'aeroway-aerodrome-international',
    'aeroway-apron',
    'aeroway-gate',
    'aeroway-helipad',
    'aeroway-runway',
    'aeroway-taxiway',
    'aeroway-terminal',
    'amenity-arts_centre',
    'amenity-bank',
    'amenity-bar',
    'amenity-bbq',
    'amenity-bicycle_parking',
    'amenity-bicycle_rental',
    'amenity-biergarten',
    'amenity-brothel',
    'amenity-bureau_de_change',
    'amenity-bus_station',
    'amenity-cafe',
    'amenity-car_rental',
    'amenity-car_sharing',
    'amenity-car_wash',
    'amenity-casino',
    'amenity-charging_station',
    'amenity-childcare',
    'amenity-cinema',
    'amenity-clinic',
    'amenity-college',
    'amenity-community_centre',
    'amenity-courthouse',
    'amenity-dentist',
    'amenity-doctors',
    'amenity-drinking_water',
    'amenity-driving_school',
    'amenity-embassy',
    'amenity-fast_food',
    'amenity-ferry_terminal',
    'amenity-fire_station',
    'amenity-food_court',
    'amenity-fountain',
    'amenity-fuel',
    'amenity-grave_yard',
    'amenity-grave_yard-christian',
    'amenity-hospital',
    'amenity-hunting_stand',
    'amenity-ice_cream',
    'amenity-internet_cafe',
    'amenity-kindergarten',
    'amenity-library',
    'amenity-marketplace',
    'amenity-motorcycle_parking',
    'amenity-nightclub',
    'amenity-nursing_home',
    'amenity-parking',
    'amenity-parking-fee',
    'amenity-parking-multi-storey',
    'amenity-parking-multi-storey-fee',
    'amenity-parking-park_and_ride',
    'amenity-parking-permissive',
    'amenity-parking-permissive-fee',
    'amenity-parking-private',
    'amenity-parking-underground',
    'amenity-parking-underground-fee',
    'amenity-payment_terminal',
    'amenity-pharmacy',
    'amenity-place_of_worship',
    'amenity-place_of_worship-buddhist',
    'amenity-place_of_worship-christian',
    'amenity-place_of_worship-hindu',
    'amenity-place_of_worship-jewish',
    'amenity-place_of_worship-muslim',
    'amenity-place_of_worship-shinto',
    'amenity-place_of_worship-taoist',
    'amenity-police',
    'amenity-post_box',
    'amenity-post_office',
    'amenity-prison',
    'amenity-pub',
    'amenity-public_bookcase',
    'amenity-recycling',
    'amenity-restaurant',
    'amenity-restaurant-vegetarian',
    'amenity-school',
    'amenity-shower',
    'amenity-speed_trap',
    'amenity-taxi',
    'amenity-telephone',
    'amenity-theatre',
    'amenity-townhall',
    'amenity-university',
    'amenity-vending_machine-cigarettes',
    'amenity-vending_machine-drinks',
    'amenity-vending_machine-parking_tickets',
    'amenity-vending_machine-public_transport_tickets',
    'amenity-veterinary',
    'amenity-waste_basket',
    'amenity-waste_disposal',
    'amenity-water_point',
    'building',
    'building-address',
    'building-garage',
    'building-train_station',
    'communication',
    'communication-line',
    'communication-line-underground',
    'craft-brewery',
    'craft-carpenter',
    'craft-electrician',
    'craft-gardener',
    'craft-hvac',
    'craft-metal_construction',
    'craft-painter',
    'craft-photographer',
    'craft-plumber',
    'craft-shoemaker',
    'craft-tailor',
    'highway-bridleway',
    'highway-bridleway-bridge',
    'highway-bridleway-permissive',
    'highway-bridleway-tunnel',
    'highway-bus_stop',
    'highway-construction',
    'highway-cycleway',
    'highway-cycleway-bridge',
    'highway-cycleway-permissive',
    'highway-cycleway-tunnel',
    'highway-footway',
    'highway-footway-alpine_hiking',
    'highway-footway-area',
    'highway-footway-bridge',
    'highway-footway-demanding_alpine_hiking',
    'highway-footway-demanding_mountain_hiking',
    'highway-footway-difficult_alpine_hiking',
    'highway-footway-hiking',
    'highway-footway-mountain_hiking',
    'highway-footway-permissive',
    'highway-footway-tunnel',
    'highway-ford',
    'highway-living_street',
    'highway-living_street-bridge',
    'highway-living_street-tunnel',
    'highway-motorway',
    'highway-motorway-bridge',
    'highway-motorway-tunnel',
    'highway-motorway_junction',
    'highway-motorway_link',
    'highway-motorway_link-bridge',
    'highway-motorway_link-tunnel',
    'highway-path',
    'highway-path-alpine_hiking',
    'highway-path-bicycle',
    'highway-path-bridge',
    'highway-path-demanding_alpine_hiking',
    'highway-path-demanding_mountain_hiking',
    'highway-path-difficult_alpine_hiking',
    'highway-path-hiking',
    'highway-path-horse',
    'highway-path-mountain_hiking',
    'highway-path-permissive',
    'highway-path-tunnel',
    'highway-pedestrian',
    'highway-pedestrian-area',
    'highway-pedestrian-bridge',
    'highway-pedestrian-tunnel',
    'highway-platform',
    'highway-primary',
    'highway-primary-bridge',
    'highway-primary-tunnel',
    'highway-primary_link',
    'highway-primary_link-bridge',
    'highway-primary_link-tunnel',
    'highway-proposed',
    'highway-raceway',
    'highway-residential',
    'highway-residential-area',
    'highway-residential-bridge',
    'highway-residential-tunnel',
    'highway-rest_area',
    'highway-road',
    'highway-road-bridge',
    'highway-road-tunnel',
    'highway-secondary',
    'highway-secondary-bridge',
    'highway-secondary-tunnel',
    'highway-secondary_link',
    'highway-secondary_link-bridge',
    'highway-secondary_link-tunnel',
    'highway-service',
    'highway-service-area',
    'highway-service-bridge',
    'highway-service-driveway',
    'highway-service-driveway-area',
    'highway-service-driveway-bridge',
    'highway-service-driveway-tunnel',
    'highway-service-parking_aisle',
    'highway-service-tunnel',
    # 'highway-services',
    'highway-speed_camera',
    'highway-steps',
    'highway-steps-bridge',
    'highway-steps-tunnel',
    'highway-tertiary',
    'highway-tertiary-bridge',
    'highway-tertiary-tunnel',
    'highway-tertiary_link',
    'highway-tertiary_link-bridge',
    'highway-tertiary_link-tunnel',
    'highway-track',
    'highway-track-area',
    'highway-track-bridge',
    'highway-track-grade1',
    'highway-track-grade2',
    'highway-track-grade3',
    'highway-track-grade3-permissive',
    'highway-track-grade4',
    'highway-track-grade4-permissive',
    'highway-track-grade5',
    'highway-track-grade5-permissive',
    'highway-track-permissive',
    'highway-track-tunnel',
    'highway-trunk',
    'highway-trunk-bridge',
    'highway-trunk-tunnel',
    'highway-trunk_link',
    'highway-trunk_link-bridge',
    'highway-trunk_link-tunnel',
    'highway-unclassified',
    'highway-unclassified-area',
    'highway-unclassified-bridge',
    'highway-unclassified-tunnel',
    'highway-world_level',
    'highway-world_towns_level',
    'historic-archaeological_site',
    'historic-battlefield',
    'historic-boundary_stone',
    'historic-castle',
    'historic-castle-defensive',
    'historic-castle-stately',
    'historic-citywalls',
    'historic-fort',
    'historic-memorial',
    'historic-memorial-plaque',
    'historic-memorial-sculpture',
    'historic-memorial-statue',
    'historic-monument',
    'historic-museum',
    'historic-ruins',
    'historic-ship',
    'historic-tomb',
    'historic-wayside_cross',
    'historic-wayside_shrine',
    'junction-roundabout',
    'landuse-cemetery',
    'landuse-cemetery-christian',
    'landuse-farm',
    'landuse-farmland',
    'landuse-farmyard',
    'landuse-forest',
    'landuse-forest-coniferous',
    'landuse-forest-deciduous',
    'landuse-forest-mixed',
    'landuse-landfill',
    'landuse-meadow',
    'landuse-orchard',
    'landuse-quarry',
    'landuse-retail',
    'landuse-salt_pond',
    'landuse-village_green',
    'landuse-vineyard',
    'leisure-common',
    'leisure-dog_park',
    'leisure-fitness_centre',
    'leisure-fitness_station',
    'leisure-garden',
    'leisure-golf_course',
    'leisure-ice_rink',
    'leisure-landscape_reserve',
    'leisure-marina',
    'leisure-nature_reserve',
    'leisure-park',
    'leisure-park-permissive',
    'leisure-park-private',
    'leisure-pitch',
    'leisure-pitch-tennis',
    'leisure-playground',
    'leisure-playground-tennis',
    'leisure-recreation_ground',
    'leisure-sauna',
    'leisure-slipway',
    'leisure-sports_centre',
    'leisure-sports_centre-climbing',
    'leisure-sports_centre-shooting',
    'leisure-sports_centre-swimming',
    'leisure-sports_centre-yoga',
    'leisure-stadium',
    'leisure-swimming_pool',
    'leisure-track',
    'leisure-water_park',
    'man_made-breakwater',
    'man_made-cairn',
    'man_made-chimney',
    'man_made-cutline',
    'man_made-lighthouse',
    'man_made-pier',
    'man_made-pipeline',
    'man_made-pipeline-overground',
    'man_made-surveillance',
    'man_made-tower',
    'man_made-wastewater_plant',
    'man_made-water_tap',
    'man_made-water_tower',
    'man_made-water_well',
    'man_made-windmill',
    'man_made-works',
    'military-bunker',
    'natural-bare_rock',
    'natural-bay',
    'natural-beach',
    'natural-cape',
    'natural-cave_entrance',
    'natural-coastline',
    'natural-geyser',
    'natural-glacier',
    'natural-grassland',
    'natural-heath',
    'natural-lake',
    'natural-meadow',
    'natural-peak',
    'natural-rock',
    'natural-salt_pond',
    'natural-scrub',
    'natural-spring',
    'natural-tree',
    'natural-tree_row',
    'natural-volcano',
    'natural-waterfall',
    'natural-wetland',
    'natural-wetland-bog',
    'natural-wetland-marsh',
    'office-company',
    'office-estate_agent',
    'office-government',
    'office-insurance',
    'office-lawyer',
    'office-ngo',
    'office-telecommunication',
    'place-city',
    'place-city-capital',
    'place-city-capital-10',
    'place-city-capital-2',
    'place-city-capital-3',
    'place-city-capital-4',
    'place-city-capital-5',
    'place-city-capital-6',
    'place-city-capital-7',
    'place-city-capital-8',
    'place-continent',
    'place-country',
    'place-county',
    'place-farm',
    'place-hamlet',
    'place-island',
    'place-islet',
    'place-isolated_dwelling',
    'place-locality',
    'place-neighbourhood',
    'place-ocean',
    'place-region',
    'place-sea',
    'place-square',
    'place-state',
    'place-state-USA',
    'place-suburb',
    'place-town',
    'place-village',
    'power-generator',
    'power-generator-hydro',
    'power-generator-photovoltaic',
    'power-generator-wind',
    'power-line',
    'power-line-underground',
    'power-minor_line',
    'power-pole',
    'power-station',
    'power-sub_station',
    'power-substation',
    'power-tower',
    'public_transport',
    'public_transport-platform',
    'railway-abandoned',
    'railway-abandoned-bridge',
    'railway-abandoned-tunnel',
    'railway-construction',
    'railway-crossing',
    'railway-disused',
    'railway-funicular',
    'railway-funicular-bridge',
    'railway-funicular-tunnel',
    'railway-halt',
    'railway-level_crossing',
    'railway-light_rail',
    'railway-light_rail-bridge',
    'railway-light_rail-tunnel',
    'railway-monorail',
    'railway-monorail-bridge',
    'railway-monorail-tunnel',
    'railway-narrow_gauge',
    'railway-narrow_gauge-bridge',
    'railway-narrow_gauge-tunnel',
    'railway-platform',
    'railway-preserved',
    'railway-preserved-bridge',
    'railway-preserved-tunnel',
    'railway-rail',
    'railway-rail-bridge',
    'railway-rail-motor_vehicle',
    'railway-rail-tunnel',
    'railway-razed',
    'railway-siding',
    'railway-spur',
    'railway-station',
    'railway-station-light_rail',
    'railway-station-monorail',
    'railway-station-subway',
    'railway-station-subway-barcelona',
    'railway-station-subway-berlin',
    'railway-station-subway-blue',
    'railway-station-subway-brown',
    'railway-station-subway-darkgreen',
    'railway-station-subway-gray',
    'railway-station-subway-green',
    'railway-station-subway-grey',
    'railway-station-subway-kiev',
    'railway-station-subway-lightblue',
    'railway-station-subway-lightgreen',
    'railway-station-subway-london',
    'railway-station-subway-madrid',
    'railway-station-subway-minsk',
    'railway-station-subway-moscow',
    'railway-station-subway-newyork',
    'railway-station-subway-orange',
    'railway-station-subway-paris',
    'railway-station-subway-purple',
    'railway-station-subway-red',
    'railway-station-subway-roma',
    'railway-station-subway-spb',
    'railway-station-subway-violet',
    'railway-station-subway-yellow',
    'railway-subway',
    'railway-subway-blue',
    'railway-subway-bridge',
    'railway-subway-brown',
    'railway-subway-darkgreen',
    'railway-subway-gray',
    'railway-subway-green',
    'railway-subway-lightblue',
    'railway-subway-lightgreen',
    'railway-subway-orange',
    'railway-subway-purple',
    'railway-subway-red',
    'railway-subway-tunnel',
    'railway-subway-violet',
    'railway-subway-yellow',
    'railway-subway_entrance',
    'railway-subway_entrance-barcelona',
    'railway-subway_entrance-berlin',
    'railway-subway_entrance-kiev',
    'railway-subway_entrance-london',
    'railway-subway_entrance-madrid',
    'railway-subway_entrance-minsk',
    'railway-subway_entrance-moscow',
    'railway-subway_entrance-newyork',
    'railway-subway_entrance-paris',
    'railway-subway_entrance-roma',
    'railway-subway_entrance-spb',
    'railway-tram',
    'railway-tram-bridge',
    'railway-tram-tunnel',
    'railway-tram_stop',
    'railway-yard',
    'route-ferry',
    'route-ferry-motor_vehicle',
    'route-ferry-motorcar',
    'route-shuttle_train',
    'shop',
    'shop-alcohol',
    'shop-bakery',
    'shop-beauty',
    'shop-beverages',
    'shop-bicycle',
    'shop-bookmaker',
    'shop-books',
    'shop-butcher',
    'shop-car',
    'shop-car_parts',
    'shop-car_repair',
    'shop-car_repair-tyres',
    'shop-chemist',
    'shop-chocolate',
    'shop-clothes',
    'shop-coffee',
    'shop-computer',
    'shop-confectionery',
    'shop-convenience',
    'shop-copyshop',
    'shop-cosmetics',
    'shop-department_store',
    'shop-doityourself',
    'shop-dry_cleaning',
    'shop-electronics',
    'shop-erotic',
    'shop-fabric',
    'shop-florist',
    'shop-funeral_directors',
    'shop-furniture',
    'shop-garden_centre',
    'shop-gift',
    'shop-greengrocer',
    'shop-hairdresser',
    'shop-hardware',
    'shop-jewelry',
    'shop-kiosk',
    'shop-laundry',
    'shop-mall',
    'shop-massage',
    'shop-mobile_phone',
    'shop-money_lender',
    'shop-motorcycle',
    'shop-music',
    'shop-musical_instrument',
    'shop-newsagent',
    'shop-optician',
    'shop-outdoor',
    'shop-pawnbroker',
    'shop-pet',
    'shop-photo',
    'shop-seafood',
    'shop-shoes',
    'shop-sports',
    'shop-stationery',
    'shop-supermarket',
    'shop-tattoo',
    'shop-tea',
    'shop-ticket',
    'shop-toys',
    'shop-travel_agency',
    'shop-tyres',
    'shop-variety_store',
    'shop-video',
    'shop-wine',
    'tourism-alpine_hut',
    'tourism-apartment',
    'tourism-artwork',
    'tourism-artwork-architecture',
    'tourism-artwork-painting',
    'tourism-artwork-sculpture',
    'tourism-artwork-statue',
    'tourism-camp_site',
    'tourism-caravan_site',
    'tourism-chalet',
    'tourism-gallery',
    'tourism-guest_house',
    'tourism-hostel',
    'tourism-hotel',
    'tourism-information',
    'tourism-information-board',
    'tourism-information-guidepost',
    'tourism-information-map',
    'tourism-information-office',
    'tourism-motel',
    'tourism-picnic_site',
    'tourism-resort',
    'tourism-theme_park',
    'tourism-wilderness_hut',
    'tourism-zoo',
    'waterway-canal',
    'waterway-canal-tunnel',
    'waterway-dam',
    'waterway-ditch',
    'waterway-ditch-tunnel',
    'waterway-dock',
    'waterway-drain',
    'waterway-drain-tunnel',
    'waterway-lock',
    'waterway-lock_gate',
    'waterway-river',
    'waterway-river-tunnel',
    'waterway-riverbank',
    'waterway-stream',
    'waterway-stream-ephemeral',
    'waterway-stream-intermittent',
    'waterway-stream-tunnel',
    'waterway-waterfall',
    'waterway-weir'
)

# secondary tags that define additional info about object
SECONDARY_TAGS = (
    'amenity-atm',
    'amenity-bench',
    'amenity-toilets',
    'area:highway',
    'area:highway-footway',
    'area:highway-living_street',
    'area:highway-path',
    'area:highway-pedestrian',
    'area:highway-primary',
    'area:highway-residential',
    'area:highway-secondary',
    'area:highway-service',
    'area:highway-steps',
    'area:highway-tertiary',
    'area:highway-unclassified',
    'boundary-administrative-10',
    'boundary-administrative-11',
    'boundary-administrative-2',
    'boundary-administrative-3',
    'boundary-administrative-4',
    'boundary-administrative-4-state',
    'boundary-administrative-5',
    'boundary-administrative-6',
    'boundary-administrative-7',
    'boundary-administrative-8',
    'boundary-administrative-9',
    'boundary-administrative-city',
    'boundary-administrative-country',
    'boundary-administrative-county',
    'boundary-administrative-municipality',
    'boundary-administrative-nation',
    'boundary-administrative-region',
    'boundary-administrative-state',
    'boundary-administrative-suburb',
    'boundary-national_park',
    'cuisine-african',
    'cuisine-american',
    'cuisine-arab',
    'cuisine-argentinian',
    'cuisine-asian',
    'cuisine-bagel',
    'cuisine-balkan',
    'cuisine-barbecue',
    'cuisine-bavarian',
    'cuisine-beef_bowl',
    'cuisine-brazilian',
    'cuisine-breakfast',
    'cuisine-burger',
    'cuisine-buschenschank',
    'cuisine-cake',
    'cuisine-caribbean',
    'cuisine-chicken',
    'cuisine-chinese',
    'cuisine-coffee_shop',
    'cuisine-crepe',
    'cuisine-croatian',
    'cuisine-curry',
    'cuisine-deli',
    'cuisine-diner',
    'cuisine-donut',
    'cuisine-ethiopian',
    'cuisine-filipino',
    'cuisine-fine_dining',
    'cuisine-fish',
    'cuisine-fish_and_chips',
    'cuisine-french',
    'cuisine-friture',
    'cuisine-georgian',
    'cuisine-german',
    'cuisine-greek',
    'cuisine-grill',
    'cuisine-heuriger',
    'cuisine-hotdog',
    'cuisine-hungarian',
    'cuisine-ice_cream',
    'cuisine-indian',
    'cuisine-indonesian',
    'cuisine-international',
    'cuisine-irish',
    'cuisine-italian',
    'cuisine-italian_pizza',
    'cuisine-japanese',
    'cuisine-kebab',
    'cuisine-korean',
    'cuisine-lao',
    'cuisine-lebanese',
    'cuisine-local',
    'cuisine-malagasy',
    'cuisine-malaysian',
    'cuisine-mediterranean',
    'cuisine-mexican',
    'cuisine-moroccan',
    'cuisine-noodles',
    'cuisine-oriental',
    'cuisine-pancake',
    'cuisine-pasta',
    'cuisine-persian',
    'cuisine-peruvian',
    'cuisine-pizza',
    'cuisine-polish',
    'cuisine-portuguese',
    'cuisine-ramen',
    'cuisine-regional',
    'cuisine-russian',
    'cuisine-sandwich',
    'cuisine-sausage',
    'cuisine-savory_pancakes',
    'cuisine-seafood',
    'cuisine-soba',
    'cuisine-spanish',
    'cuisine-steak_house',
    'cuisine-sushi',
    'cuisine-tapas',
    'cuisine-tea',
    'cuisine-thai',
    'cuisine-turkish',
    'cuisine-vegan',
    'cuisine-vegetarian',
    'cuisine-vietnamese',
    'emergency-defibrillator',
    'emergency-fire_hydrant',
    'emergency-phone',
    'event-fc2018',
    'event-fc2018_city',
    'hwtag-lit',
    'hwtag-oneway',
    'hwtag-private',
    'hwtag-toll',
    'internet_access',
    'internet_access-wlan',
    'olympics-attraction',
    'olympics-bike_sport',
    'olympics-live_site',
    'olympics-official_building',
    'olympics-stadium_main',
    'olympics-transport_airport',
    'olympics-transport_boat',
    'olympics-transport_bus',
    'olympics-transport_cable',
    'olympics-transport_railway',
    'olympics-transport_subway',
    'olympics-transport_tram',
    'olympics-water_sport',
    'piste:lift-j-bar',
    'piste:lift-magic_carpet',
    'piste:lift-platter',
    'piste:lift-rope_tow',
    'piste:lift-t-bar',
    'piste:type-downhill',
    'piste:type-downhill-advanced',
    'piste:type-downhill-easy',
    'piste:type-downhill-expert',
    'piste:type-downhill-freeride',
    'piste:type-downhill-intermediate',
    'piste:type-downhill-novice',
    'piste:type-nordic',
    'piste:type-sled',
    'psurface-paved_bad',
    'psurface-paved_good',
    'psurface-unpaved_bad',
    'psurface-unpaved_good',
    'sponsored-banner-deliveryclub',
    'sponsored-banner-geerbest_de',
    'sponsored-banner-geerbest_fr',
    'sponsored-banner-geerbest_uk',
    'sponsored-banner-lamoda_ru',
    'sponsored-banner-lamoda_ua',
    'sponsored-banner-raileurope',
    'sponsored-banner-rentalcars',
    'sponsored-banner-tutu',
    'sponsored-banner-viator',
    'sponsored-booking',
    'sponsored-cian',
    'sponsored-halloween',
    'sponsored-holiday',
    'sponsored-opentable',
    'sponsored-partner1',
    'sponsored-partner10',
    'sponsored-partner12',
    'sponsored-partner18',
    'sponsored-partner19',
    'sponsored-partner2',
    'sponsored-partner20',
    'sponsored-partner3',
    'sponsored-partner4',
    'sponsored-partner5',
    'sponsored-partner6',
    'sponsored-partner7',
    'sponsored-partner8',
    'sponsored-partner9',
    'sponsored-thor',
    'sponsored-tinkoff',
    'sponsored-viator',
    'sport-american_football',
    'sport-archery',
    'sport-athletics',
    'sport-australian_football',
    'sport-baseball',
    'sport-basketball',
    'sport-bowls',
    'sport-cricket',
    'sport-curling',
    'sport-diving',
    'sport-equestrian',
    'sport-football',
    'sport-golf',
    'sport-gymnastics',
    'sport-handball',
    'sport-multi',
    'sport-scuba_diving',
    'sport-shooting',
    'sport-skiing',
    'sport-soccer',
    'sport-swimming',
    'sport-tennis',
    'tourism-attraction',
    'tourism-attraction-animal',
    'tourism-attraction-specified',
    'tourism-museum',
    'tourism-viewpoint',
    'traffic_calming',
    'wheelchair',
    'wheelchair-limited',
    'wheelchair-no',
    'wheelchair-yes'
)


# defining groups of tags
# sorted by popularity
GROUPS = (
    ('roads', frozenset((
        'highway-pedestrian',
        'highway-pedestrian-area',
        'highway-unclassified',
        'highway-motorway',
        'highway-trunk',
        'highway-primary',
        'highway-tertiary',
        'highway-secondary',
        'highway-residential'
    ))),
    ('hotels', frozenset((
        'tourism-hotel',
        'tourism-hostel',
        'tourism-apartment',
        'tourism-guest_house',
        'tourism-resort',
        'tourism-camp_site'
    ))),
    ('hotels_all', frozenset((
        'tourism-apartment',
        'tourism-camp_site',
        'tourism-chalet',
        'tourism-guest_house',
        'tourism-hostel',
        'tourism-hotel',
        'tourism-motel',
        'tourism-resort',
    ))),
    ('food', frozenset((
        'amenity-bar',
        'amenity-fast_food',
        'amenity-cafe',
        'amenity-restaurant',
        'amenity-pub',
        'shop-bakery'
    ))),
    ('city_transport', frozenset((
        'railway-station-subway',
        'railway-subway_entrance',
        'railway-tram_stop',
        'highway-bus_stop'
    ))),
    ('global_transport', frozenset((
        'aeroway-aerodrome',
        'aeroway-aerodrome-international',
        'aerialway-station',
        'amenity-ferry_terminal',
        'railway-halt',
        'railway-station',
        'building-train_station',
        'amenity-bus_station'
    ))),
    ('personal_transport', frozenset((
        'amenity-parking',
        'amenity-parking-fee',
        'amenity-fuel',
        'highway-service'
    ))),
    ('large_toponyms', frozenset((
        'place-region',
        'place-city-capital-6',
        'place-locality',
        'place-hamlet',
        'place-continent',
        'place-state',
        'place-city-capital-6',
        'place-city-capital-4',
        'place-city-capital-2',
        'place-suburb',
        'place-country',
        'place-city',
        'place-town',
        'place-village',
        'place-island'
    ))),
    ('sightseeing', frozenset((
        'amenity-place_of_worship',
        'tourism-zoo',
        'man_made-lighthouse',
        'amenity-place_of_worship-muslim',
        'amenity-fountain',
        'waterway-waterfall',
        'natural-cave_entrance',
        'historic-castle',
        'historic-castle-stately',
        'historic-castle-defensive',
        'tourism-artwork',
        'tourism-artwork-statue',
        'tourism-artwork-sculpture',
        'historic-memorial',
        'historic-memorial-statue',
        'amenity-place_of_worship-christian',
        'amenity-place_of_worship-buddhist',
        'amenity-place_of_worship-hindu',
        'natural-peak',
        'amenity-theatre',
        'boundary-national_park',
        'tourism-theme_park',
        'natural-beach',
        'natural-volcano',
        'natural-water',
        'natural-spring',
        'historic-monument',
        'historic-archaeological_site',
        'historic-ruins',
        'leisure-park',
        'tourism-attraction',
        'tourism-viewpoint',
        'tourism-museum',
        'leisure-nature_reserve',
        'leisure-garden',
        'place-square',
        'amenity-arts_centre'
    ))),
    ('shopping', frozenset((
        'shop-clothes',
        'amenity-marketplace',
        'shop',
        'shop-convenience',
        'shop-mall',
        'shop-supermarket',
        'shop-department_store',
        'shop-books'
    ))),
    ('greenzone', frozenset((
        'landuse-forest',
        'natural-wood',
        'landuse-farmland',
        'landuse-meadow'
    ))),
    ('health', frozenset((
        'amenity-pharmacy',
        'amenity-hospital'
    )))
)


def get_group_by_tag(tag):
    """Match tag to the appropriate group."""
    for group, tag_set in GROUPS:
        if tag in tag_set:
            return group


_PRIMARY_SET = {tag: index for index, tag in enumerate(PRIMARY_TAGS)}
_SECONDARY_SET = {tag: index for index, tag in enumerate(SECONDARY_TAGS)}


class TaggedOSMObject(object):
    """Numeric representation for the tags."""

    _primary_set_inverted = PRIMARY_TAGS
    _secondary_set_inverted = SECONDARY_TAGS

    _max_primary_num = 3
    """Primary numbers are larger so we try to minimize them.
    This num is allowed. Others are randomly cut off."""
    _max_secondary_num = 7
    """Max number for secondary tags. We will randomly cut excessive tags."""
    __fixed_binary_format__ = 'H' * _max_primary_num + 'B' * _max_secondary_num

    def __init__(self, tags=None):
        """
        Default constructor.

        If string tags are provided - they will be imported
        """
        if tags is not None:
            self._import_tags(tags)

        self.primary_tags = tuple()
        self.secondary_tags = tuple()

    def _import_tags(self, tags):
        secondary_tags = []
        primary_tags = []
        is_building = False
        for tag in sorted(tags):
            try:
                secondary_tags.append(_SECONDARY_SET[tag])
            except KeyError:
                if tag == 'building':
                    is_building = True
                    continue

                try:
                    primary_tags.append(_PRIMARY_SET[tag])
                except KeyError:
                    pass

        if not primary_tags and is_building:
            primary_tags = [_PRIMARY_SET['building']]
        else:
            # we have a little number of places with excessive tagging
            primary_tags = primary_tags[:self._max_primary_num]

        # we have a little number of places with excessive tagging
        secondary_tags = secondary_tags[:self._max_secondary_num]

        self.primary_tags = tuple(primary_tags)
        self.secondary_tags = tuple(secondary_tags)

    @classmethod
    def get_numeric_tag(cls, string_tag):
        """
        Get a numeric pair for the string tag.

        First element reserved for the primary tags,
        second for the secondary.
        """
        return _PRIMARY_SET.get(string_tag), _SECONDARY_SET.get(string_tag)

    def has_tag(self, string_tag):
        """Used for comparison of tags of different representations."""
        primary, secondary = self.get_numeric_tag(string_tag)
        return primary in self.primary_tags or secondary in self.secondary_tags

    def is_superset(self, other):
        """Check if another object tags are included in the current object."""
        tags = self.tags
        for t in other.tags:
            if t not in tags:
                return False
        return True

    def export_primary_tags(self):
        """Get string values for the primary tags."""
        return tuple(
            self._primary_set_inverted[t]
            for t in self.primary_tags
        )

    def export_secondary_tags(self):
        """Get string values for the secondary tags."""
        return tuple(
            self._secondary_set_inverted[t]
            for t in self.secondary_tags
        )

    @property
    def tags(self):
        """Get all tags in their numerical representation."""
        return self.primary_tags + self.secondary_tags

    def __gen_fixed_values__(self):
        """Generate fixed length iterable."""
        for tag in self.primary_tags:
            yield tag

        for i in range(self._max_primary_num - len(self.primary_tags)):
            yield 0

        for tag in self.secondary_tags:
            yield tag

        for i in range(self._max_secondary_num - len(self.secondary_tags)):
            yield 0

    @classmethod
    def from_fixed_values(cls, values):
        """Load from a fixed values representation."""
        obj = cls()
        obj.primary_tags = values[:cls._max_primary_num]
        obj.secondary_tags = values[cls._max_primary_num:]
        return obj
